"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGraphQlJit = void 0;
const graphql_jit_1 = require("graphql-jit");
const lru_cache_1 = require("lru-cache");
const core_1 = require("@envelop/core");
const DEFAULT_MAX = 1000;
const DEFAULT_TTL = 3600000;
const useGraphQlJit = (compilerOptions = {}, pluginOptions = {}) => {
    const jitCacheByDocumentString = typeof pluginOptions.cache !== 'undefined'
        ? pluginOptions.cache
        : new lru_cache_1.LRUCache({ max: DEFAULT_MAX, ttl: DEFAULT_TTL });
    const jitCacheByDocument = new WeakMap();
    function getCacheEntry(args) {
        let cacheEntry;
        cacheEntry = jitCacheByDocument.get(args.document);
        const documentSource = (0, core_1.getDocumentString)(args.document);
        if (!cacheEntry && documentSource) {
            cacheEntry = jitCacheByDocumentString.get(documentSource);
        }
        if (!cacheEntry) {
            const compilationResult = (0, graphql_jit_1.compileQuery)(args.schema, args.document, args.operationName ?? undefined, compilerOptions);
            if (!(0, graphql_jit_1.isCompiledQuery)(compilationResult)) {
                if (pluginOptions?.onError) {
                    pluginOptions.onError(compilationResult);
                }
                else {
                    console.error(compilationResult);
                }
                cacheEntry = {
                    query: () => compilationResult,
                    stringify: r => JSON.stringify(r),
                };
            }
            else {
                cacheEntry = compilationResult;
            }
            jitCacheByDocument.set(args.document, cacheEntry);
            if (documentSource) {
                jitCacheByDocumentString.set(documentSource, cacheEntry);
            }
        }
        return cacheEntry;
    }
    return {
        async onExecute({ args, setExecuteFn }) {
            if (!pluginOptions.enableIf ||
                (pluginOptions.enableIf && (await pluginOptions.enableIf(args)))) {
                setExecuteFn((0, core_1.makeExecute)(function jitExecutor(args) {
                    const cacheEntry = getCacheEntry(args);
                    const result$ = cacheEntry.query(args.rootValue, args.contextValue, args.variableValues);
                    if (isPromise(result$)) {
                        return result$.then(r => {
                            r.stringify = cacheEntry.stringify;
                            return r;
                        });
                    }
                    result$.stringify = cacheEntry.stringify;
                    return result$;
                }));
            }
        },
        async onSubscribe({ args, setSubscribeFn }) {
            if (!pluginOptions.enableIf ||
                (pluginOptions.enableIf && (await pluginOptions.enableIf(args)))) {
                setSubscribeFn((0, core_1.makeSubscribe)(async function jitSubscriber(args) {
                    const cacheEntry = getCacheEntry(args);
                    const result$ = cacheEntry.subscribe
                        ? cacheEntry.subscribe(args.rootValue, args.contextValue, args.variableValues)
                        : cacheEntry.query(args.rootValue, args.contextValue, args.variableValues);
                    if (isPromise(result$)) {
                        return result$.then(r => {
                            r.stringify = cacheEntry.stringify;
                            return r;
                        });
                    }
                    result$.stringify = cacheEntry.stringify;
                    return result$;
                }));
            }
        },
    };
};
exports.useGraphQlJit = useGraphQlJit;
function isPromise(p) {
    return p?.then != null;
}
